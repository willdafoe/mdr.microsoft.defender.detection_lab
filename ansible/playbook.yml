---
- name: "[ansible.play] configuring hosts"
  hosts: localhost
  gather_facts: false
  ignore_errors: false
  #vars:
    #ansible_user: '{{ admin_username }}'
    #ansible_password: '{{ admin_password }}'

  tasks:
    - name: "debugging ansible vars"
      debug:
        mmsg: "'{{ lookup('ansible.builtin.env', 'ANSIBLE_COLLECTIONS_PATHS') }}'"

      
    #- name: "[microsoft defender lab] windows ping"
    #  win_ping:


#    - block:        
#        - name: "[ansible.playbook] running terraform plan"
#          import_role:
#            name: terraform
#            tasks_from: plan.yml
#          vars:
#            variables: '{{ terraform_variables }}'
#
#      delegate_to: localhost
#      when: tf_command == "plan"
  

#- name: "[ansible.play] configuring domain controller"
#  hosts: domain_controllers
#  gather_facts: true
#  collections:
#    - sophos.mdr
#  vars:
#    ansible_connection: winrm
#    ansible_winrm_transport: ntlm
#    ansible_winrm_scheme: http
#    ansible_winrm_server_cert_validation: ignore
#    ansible_port: 5985
#    ansible_user: '{{ admin_username }}'
#    ansible_password: '{{ admin_password }}'
#    dns_domain_name: '{{ dns_domain_name }}'
#    safe_mode_password: '{{ admin_password }}'
  
#  tasks:
#    - block:
#        - name: "[ansible.playbook] configure domain controller"
#          import_role:
#            name: domain
#            tasks_from: domain_controller.yml
#      when: ansible_facts.windows_domain_role == "Stand-alone workstation" and state == "present"
      

#- name: "[ansible.play] configuring domain members"
#  hosts: windows_clients
#  gather_facts: false
#  collections:
#    - sophos.mdr
#  vars:
#    ansible_connection: winrm
#    ansible_winrm_transport: ntlm
#    ansible_winrm_scheme: http
#    ansible_winrm_server_cert_validation: ignore
#    ansible_port: 5985
#    ansible_user: '{{ admin_username }}'
#    ansible_password: '{{ admin_password }}'
  
#  tasks:
#    - block:
#        - name: "[ansible.playbook] getting domain controller IP address"
#          ansible.builtin.setup:
#          delegate_to: "{{ item}}"
#          delegate_facts: true
#          loop: "{{  groups['domain_controllers'] }}"
#          register: _domain_controller_facts
        
#        - ansible.builtin.set_fact:
#            dns_server: '{{ _domain_controller_facts.results[0].ansible_facts.ansible_interfaces[0].ipv4.address }}'
#
#        - name: "[ansible.playbook] configure domain members"
#          import_role:
#            name: domain
#            tasks_from: domain_membership.yml

#      when: ansible_facts.windows_domain_role == "Stand-alone workstation" and state == "present"                



