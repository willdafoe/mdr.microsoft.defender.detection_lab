name: Azure Integration Tests

permissions:
  id-token: write
  contents: read
on:
  push:

env:
  NAMESPACE: "microsoft defender"
  STAGE: "IntegrationTest"
  ENVIRONMENT: "dev"


jobs:
  integration_test:
    runs-on: ubuntu-latest
    env:
      template_file: ${{ github.workspace }}/templates/config.yml.j2
      output_file: ${{ github.workspace }}/config/config.yml
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v3         
      - name: Login to Azure
        id: az_logon
        uses: azure/login@v1
        continue-on-error: true
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}  
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      - name: Generate configuration file
        uses: cuchi/jinja2-action@v1.2.0
        with:
          template: ${{ env.template_file }}
          output_file: ${{ env.output_file }}
          variables: |
            domain_controller_count=1
            windows_server_count=1
            windows_client_count=1
      - id: runner_ip
        run: |
          RUNNER_IP=$(curl https://api.ipify.org)/32
          if [ "$RUNNER_IP" ]; then
            echo "runner_ip=${RUNNER_IP}" >>$GITHUB_OUTPUT
          fi           
      - name: Generate token
        id: generate_token
        uses: tibdex/github-app-token@v1.7.0
        with:      
          app_id: ${{ secrets.APP_ID}} 
          private_key: ${{ secrets.PRIVATE_KEY }}
      - name: Getting statefile from previous run
        id: runid
        continue-on-error: true
        run: |
          base_uri="https://api.github.com"
          repo="${{ github.repository }}"
          artifacts_uri="$base_uri/repos/$repo/actions/artifacts"
          token="${{ steps.generate_token.outputs.token }}"
          api_response=$(curl -s -L -w "http_response:%{http_code}" \
              -H "Authorization: Bearer $token" \
              "$artifacts_uri")
          status_code=$(echo "$api_response" | grep -o "http_response:[0-9]\+" | cut -d ':' -f 2)

          if [ "$status_code" -eq 200 ]; then
              sorted_artifacts=$(curl -s -L \
              -H "Authorization: Bearer $token" \
              "$artifacts_uri" | jq --arg name "terraformstatefile" '.artifacts | map(select(.name == $name)) | sort_by(.created_at) | reverse')
              most_recent=$(echo "$sorted_artifacts" | jq -r 'first(.[])')
              archive_download_url=$(echo "$most_recent" | jq -r '.archive_download_url')
              if [ "$archive_download_url" ]; then
                  echo "Most recent artifact URI = $archive_download_url"
                  download=$(curl -s -L -w "http_response:%{http_code}" \
                      -H "Authorization: Bearer $token" \
                      "$archive_download_url" -o "./terraformstatefile.zip")
                  status_code=$(echo "$download" | grep -o "http_response:[0-9]\+" | cut -d ':' -f 2)
                  if [ "$status_code" -eq 200 ]; then
                      echo "Statefile artifact downloaded! Extracting contents..."
                      unzip -o "./terraformstatefile.zip"
                  else
                      echo "Error: $status_code"
                      exit 1
                  fi
              else
                  echo "No artifact found!"
                  exit 0
              fi
          else
              echo "Error: $status_code"
              exit 1
          fi
      - name: Terraform Init
        id: init
        run: |
          terraform init
      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -input=false -out=terraform.plan \
          && terraform show -no-color terraform.plan
        env:
          TF_VAR_name: ${{ github.repository_owner }}
          TF_VAR_namespace: ${{ env.NAMESPACE }}
          TF_VAR_environment: ${{ env.ENVIRONMENT }}
          TF_VAR_stage: ${{ env.STAGE }}
          TF_VAR_location: eastus
          TF_VAR_admin_username: ${{ secrets.ADMIN_USERNAME }}
          TF_VAR_admin_password: ${{ secrets.ADMIN_PASSWORD }}
          TF_VAR_trusted_ips: '[ "${{ secrets.TRUSTED_IP }}", "${{ steps.runner_ip.outputs.runner_ip }}" ]'
      - name: Running Terraform Apply
        id: apply
        if: steps.plan.outcome == 'success'
        run: | 
          terraform apply \
            -no-color \
            -input=false \
            terraform.plan        
      - name: Saving Terraform Statefile Artifact
        uses: actions/upload-artifact@v3
        with:
          name: terraformstatefile
          path: ${{ github.workspace }}/terraform.tfstate            
      - id: ansible
        working-directory: ${{ github.workspace }}/ansible
        env:
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}  
        run: |
          ansible-inventory -i ./inventory/myazure_rm.yml --list -vvv
#          ansible-galaxy install -r requirements.yml \
#          && ansible-playbook -i ./inventory/myazure_rm.yml \
#            -e ansible_winrm_server_cert_validation=ignore \
#            -e ansible_winrm_transport=ntlm \
#            -e ansible_port=5985 \
#            -e ansible_winrm_scheme=http \
#            -e ansible_connection=winrm \
#            -e admin_username=${{ secrets.ADMIN_USERNAME }} \
#            -e admin_password=${{ secrets.ADMIN_PASSWORD }} \
#            --verbose \
#            playbook.yml